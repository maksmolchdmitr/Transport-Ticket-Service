/*
 * This file is generated by jOOQ.
 */
package maks.molch.dmitr.core.jooq;


import maks.molch.dmitr.core.jooq.tables.*;
import maks.molch.dmitr.core.jooq.tables.records.*;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import javax.annotation.processing.Generated;


/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.10"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CarrierTableRecord> CONSTRAINT_3 = Internal.createUniqueKey(CarrierTable.CARRIER_TABLE, DSL.name("CONSTRAINT_3"), new TableField[] { CarrierTable.CARRIER_TABLE.NAME }, true);
    public static final UniqueKey<PurchasedTicketsTableRecord> CONSTRAINT_B = Internal.createUniqueKey(PurchasedTicketsTable.PURCHASED_TICKETS_TABLE, DSL.name("CONSTRAINT_B"), new TableField[]{PurchasedTicketsTable.PURCHASED_TICKETS_TABLE.ID}, true);
    public static final UniqueKey<PurchasedTicketsTableRecord> CONSTRAINT_BE0A = Internal.createUniqueKey(PurchasedTicketsTable.PURCHASED_TICKETS_TABLE, DSL.name("CONSTRAINT_BE0A"), new TableField[]{PurchasedTicketsTable.PURCHASED_TICKETS_TABLE.USER_LOGIN, PurchasedTicketsTable.PURCHASED_TICKETS_TABLE.TICKET_ID}, true);
    public static final UniqueKey<RouteTableRecord> CONSTRAINT_4 = Internal.createUniqueKey(RouteTable.ROUTE_TABLE, DSL.name("CONSTRAINT_4"), new TableField[] { RouteTable.ROUTE_TABLE.ID }, true);
    public static final UniqueKey<RouteTableRecord> UNIQUE_ROUTE_CONSTRAINT = Internal.createUniqueKey(RouteTable.ROUTE_TABLE, DSL.name("UNIQUE_ROUTE_CONSTRAINT"), new TableField[]{RouteTable.ROUTE_TABLE.DEPARTURE, RouteTable.ROUTE_TABLE.ARRIVAL, RouteTable.ROUTE_TABLE.CARRIER_NAME}, true);
    public static final UniqueKey<TicketTableRecord> CONSTRAINT_5 = Internal.createUniqueKey(TicketTable.TICKET_TABLE, DSL.name("CONSTRAINT_5"), new TableField[]{TicketTable.TICKET_TABLE.ID}, true);
    public static final UniqueKey<TicketTableRecord> CONSTRAINT_5CD = Internal.createUniqueKey(TicketTable.TICKET_TABLE, DSL.name("CONSTRAINT_5CD"), new TableField[]{TicketTable.TICKET_TABLE.ROUTE_ID, TicketTable.TICKET_TABLE.DATE_AND_TIME, TicketTable.TICKET_TABLE.SEAT_NUMBER}, true);
    public static final UniqueKey<TokenTableRecord> CONSTRAINT_7 = Internal.createUniqueKey(TokenTable.TOKEN_TABLE, DSL.name("CONSTRAINT_7"), new TableField[]{TokenTable.TOKEN_TABLE.ID}, true);
    public static final UniqueKey<TokenTableRecord> CONSTRAINT_72 = Internal.createUniqueKey(TokenTable.TOKEN_TABLE, DSL.name("CONSTRAINT_72"), new TableField[]{TokenTable.TOKEN_TABLE.TOKEN}, true);
    public static final UniqueKey<UserTableRecord> CONSTRAINT_C = Internal.createUniqueKey(UserTable.USER_TABLE, DSL.name("CONSTRAINT_C"), new TableField[] { UserTable.USER_TABLE.LOGIN }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<PurchasedTicketsTableRecord, UserTableRecord> CONSTRAINT_BE = Internal.createForeignKey(PurchasedTicketsTable.PURCHASED_TICKETS_TABLE, DSL.name("CONSTRAINT_BE"), new TableField[]{PurchasedTicketsTable.PURCHASED_TICKETS_TABLE.USER_LOGIN}, Keys.CONSTRAINT_C, new TableField[]{UserTable.USER_TABLE.LOGIN}, true);
    public static final ForeignKey<PurchasedTicketsTableRecord, TicketTableRecord> CONSTRAINT_BE0 = Internal.createForeignKey(PurchasedTicketsTable.PURCHASED_TICKETS_TABLE, DSL.name("CONSTRAINT_BE0"), new TableField[]{PurchasedTicketsTable.PURCHASED_TICKETS_TABLE.TICKET_ID}, Keys.CONSTRAINT_5, new TableField[]{TicketTable.TICKET_TABLE.ID}, true);
    public static final ForeignKey<RouteTableRecord, CarrierTableRecord> CONSTRAINT_4D = Internal.createForeignKey(RouteTable.ROUTE_TABLE, DSL.name("CONSTRAINT_4D"), new TableField[] { RouteTable.ROUTE_TABLE.CARRIER_NAME }, Keys.CONSTRAINT_3, new TableField[] { CarrierTable.CARRIER_TABLE.NAME }, true);
    public static final ForeignKey<TicketTableRecord, RouteTableRecord> CONSTRAINT_5C = Internal.createForeignKey(TicketTable.TICKET_TABLE, DSL.name("CONSTRAINT_5C"), new TableField[]{TicketTable.TICKET_TABLE.ROUTE_ID}, Keys.CONSTRAINT_4, new TableField[]{RouteTable.ROUTE_TABLE.ID}, true);
    public static final ForeignKey<TicketTableRecord, UserTableRecord> FK_TICKET_TABLE_PURCHASED_BY = Internal.createForeignKey(TicketTable.TICKET_TABLE, DSL.name("FK_TICKET_TABLE_PURCHASED_BY"), new TableField[]{TicketTable.TICKET_TABLE.PURCHASED_BY}, Keys.CONSTRAINT_C, new TableField[]{UserTable.USER_TABLE.LOGIN}, true);
    public static final ForeignKey<TokenTableRecord, UserTableRecord> CONSTRAINT_727 = Internal.createForeignKey(TokenTable.TOKEN_TABLE, DSL.name("CONSTRAINT_727"), new TableField[]{TokenTable.TOKEN_TABLE.USER_LOGIN}, Keys.CONSTRAINT_C, new TableField[]{UserTable.USER_TABLE.LOGIN}, true);
}
