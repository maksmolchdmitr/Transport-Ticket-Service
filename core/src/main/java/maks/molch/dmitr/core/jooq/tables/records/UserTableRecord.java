/*
 * This file is generated by jOOQ.
 */
package maks.molch.dmitr.core.jooq.tables.records;


import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import maks.molch.dmitr.core.jooq.tables.UserTable;

import org.jetbrains.annotations.NotNull;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.10"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserTableRecord extends UpdatableRecordImpl<UserTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>USER_TABLE.LOGIN</code>.
     */
    public void setLogin(@NotNull String value) {
        set(0, value);
    }

    /**
     * Getter for <code>USER_TABLE.LOGIN</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 32)
    @NotNull
    public String getLogin() {
        return (String) get(0);
    }

    /**
     * Setter for <code>USER_TABLE.PASSWORD</code>.
     */
    public void setPassword(@NotNull String value) {
        set(1, value);
    }

    /**
     * Getter for <code>USER_TABLE.PASSWORD</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 32)
    @NotNull
    public String getPassword() {
        return (String) get(1);
    }

    /**
     * Setter for <code>USER_TABLE.FULL_NAME</code>.
     */
    public void setFullName(@NotNull String value) {
        set(2, value);
    }

    /**
     * Getter for <code>USER_TABLE.FULL_NAME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 64)
    @NotNull
    public String getFullName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserTableRecord
     */
    public UserTableRecord() {
        super(UserTable.USER_TABLE);
    }

    /**
     * Create a detached, initialised UserTableRecord
     */
    @ConstructorProperties({ "login", "password", "fullName" })
    public UserTableRecord(@NotNull String login, @NotNull String password, @NotNull String fullName) {
        super(UserTable.USER_TABLE);

        setLogin(login);
        setPassword(password);
        setFullName(fullName);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UserTableRecord
     */
    public UserTableRecord(maks.molch.dmitr.core.jooq.tables.pojos.UserTable value) {
        super(UserTable.USER_TABLE);

        if (value != null) {
            setLogin(value.getLogin());
            setPassword(value.getPassword());
            setFullName(value.getFullName());
            resetChangedOnNotNull();
        }
    }
}
