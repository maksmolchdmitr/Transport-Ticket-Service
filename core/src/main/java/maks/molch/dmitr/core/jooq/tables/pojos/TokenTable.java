/*
 * This file is generated by jOOQ.
 */
package maks.molch.dmitr.core.jooq.tables.pojos;


import jakarta.validation.constraints.Size;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;
import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.19.10"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class TokenTable implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer id;
    private String token;
    private Boolean revoked;
    private String type;
    private String userLogin;

    public TokenTable() {
    }

    public TokenTable(TokenTable value) {
        this.id = value.id;
        this.token = value.token;
        this.revoked = value.revoked;
        this.type = value.type;
        this.userLogin = value.userLogin;
    }

    @ConstructorProperties({"id", "token", "revoked", "type", "userLogin"})
    public TokenTable(
            @Nullable Integer id,
            @NotNull String token,
            @Nullable Boolean revoked,
            @NotNull String type,
            @NotNull String userLogin
    ) {
        this.id = id;
        this.token = token;
        this.revoked = revoked;
        this.type = type;
        this.userLogin = userLogin;
    }

    /**
     * Getter for <code>TOKEN_TABLE.ID</code>.
     */
    @Nullable
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>TOKEN_TABLE.ID</code>.
     */
    public void setId(@Nullable Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>TOKEN_TABLE.TOKEN</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getToken() {
        return this.token;
    }

    /**
     * Setter for <code>TOKEN_TABLE.TOKEN</code>.
     */
    public void setToken(@NotNull String token) {
        this.token = token;
    }

    /**
     * Getter for <code>TOKEN_TABLE.REVOKED</code>.
     */
    @Nullable
    public Boolean getRevoked() {
        return this.revoked;
    }

    /**
     * Setter for <code>TOKEN_TABLE.REVOKED</code>.
     */
    public void setRevoked(@Nullable Boolean revoked) {
        this.revoked = revoked;
    }

    /**
     * Getter for <code>TOKEN_TABLE.TYPE</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 20)
    @NotNull
    public String getType() {
        return this.type;
    }

    /**
     * Setter for <code>TOKEN_TABLE.TYPE</code>.
     */
    public void setType(@NotNull String type) {
        this.type = type;
    }

    /**
     * Getter for <code>TOKEN_TABLE.USER_LOGIN</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 32)
    @NotNull
    public String getUserLogin() {
        return this.userLogin;
    }

    /**
     * Setter for <code>TOKEN_TABLE.USER_LOGIN</code>.
     */
    public void setUserLogin(@NotNull String userLogin) {
        this.userLogin = userLogin;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final TokenTable other = (TokenTable) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        } else if (!this.id.equals(other.id))
            return false;
        if (this.token == null) {
            if (other.token != null)
                return false;
        } else if (!this.token.equals(other.token))
            return false;
        if (this.revoked == null) {
            if (other.revoked != null)
                return false;
        } else if (!this.revoked.equals(other.revoked))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        } else if (!this.type.equals(other.type))
            return false;
        if (this.userLogin == null) {
            if (other.userLogin != null)
                return false;
        } else if (!this.userLogin.equals(other.userLogin))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.token == null) ? 0 : this.token.hashCode());
        result = prime * result + ((this.revoked == null) ? 0 : this.revoked.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.userLogin == null) ? 0 : this.userLogin.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TokenTable (");

        sb.append(id);
        sb.append(", ").append(token);
        sb.append(", ").append(revoked);
        sb.append(", ").append(type);
        sb.append(", ").append(userLogin);

        sb.append(")");
        return sb.toString();
    }
}
