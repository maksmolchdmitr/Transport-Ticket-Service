/*
 * This file is generated by jOOQ.
 */
package maks.molch.dmitr.core.jooq.tables.records;


import jakarta.validation.constraints.Size;
import maks.molch.dmitr.core.jooq.tables.PurchasedTickets;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.19.10"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PurchasedTicketsRecord extends UpdatableRecordImpl<PurchasedTicketsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>PURCHASED_TICKETS.ID</code>.
     */
    public void setId(@Nullable Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>PURCHASED_TICKETS.ID</code>.
     */
    @Nullable
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>PURCHASED_TICKETS.USER_LOGIN</code>.
     */
    public void setUserLogin(@NotNull String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PURCHASED_TICKETS.USER_LOGIN</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 32)
    @NotNull
    public String getUserLogin() {
        return (String) get(1);
    }

    /**
     * Setter for <code>PURCHASED_TICKETS.TICKET_ID</code>.
     */
    public void setTicketId(@NotNull Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>PURCHASED_TICKETS.TICKET_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getTicketId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>PURCHASED_TICKETS.PURCHASE_DATETIME</code>.
     */
    public void setPurchaseDatetime(@NotNull LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>PURCHASED_TICKETS.PURCHASE_DATETIME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public LocalDateTime getPurchaseDatetime() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PurchasedTicketsRecord
     */
    public PurchasedTicketsRecord() {
        super(PurchasedTickets.PURCHASED_TICKETS);
    }

    /**
     * Create a detached, initialised PurchasedTicketsRecord
     */
    @ConstructorProperties({"id", "userLogin", "ticketId", "purchaseDatetime"})
    public PurchasedTicketsRecord(@Nullable Integer id, @NotNull String userLogin, @NotNull Integer ticketId, @NotNull LocalDateTime purchaseDatetime) {
        super(PurchasedTickets.PURCHASED_TICKETS);

        setId(id);
        setUserLogin(userLogin);
        setTicketId(ticketId);
        setPurchaseDatetime(purchaseDatetime);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PurchasedTicketsRecord
     */
    public PurchasedTicketsRecord(maks.molch.dmitr.core.jooq.tables.pojos.PurchasedTickets value) {
        super(PurchasedTickets.PURCHASED_TICKETS);

        if (value != null) {
            setId(value.getId());
            setUserLogin(value.getUserLogin());
            setTicketId(value.getTicketId());
            setPurchaseDatetime(value.getPurchaseDatetime());
            resetChangedOnNotNull();
        }
    }
}
