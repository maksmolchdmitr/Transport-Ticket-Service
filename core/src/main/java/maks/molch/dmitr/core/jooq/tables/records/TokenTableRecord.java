/*
 * This file is generated by jOOQ.
 */
package maks.molch.dmitr.core.jooq.tables.records;


import jakarta.validation.constraints.Size;
import maks.molch.dmitr.core.jooq.tables.TokenTable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.19.10"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class TokenTableRecord extends UpdatableRecordImpl<TokenTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>TOKEN_TABLE.ID</code>.
     */
    public void setId(@Nullable Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>TOKEN_TABLE.ID</code>.
     */
    @Nullable
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>TOKEN_TABLE.TOKEN</code>.
     */
    public void setToken(@NotNull String value) {
        set(1, value);
    }

    /**
     * Getter for <code>TOKEN_TABLE.TOKEN</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getToken() {
        return (String) get(1);
    }

    /**
     * Setter for <code>TOKEN_TABLE.REVOKED</code>.
     */
    public void setRevoked(@Nullable Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>TOKEN_TABLE.REVOKED</code>.
     */
    @Nullable
    public Boolean getRevoked() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>TOKEN_TABLE.TYPE</code>.
     */
    public void setType(@NotNull String value) {
        set(3, value);
    }

    /**
     * Getter for <code>TOKEN_TABLE.TYPE</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 20)
    @NotNull
    public String getType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>TOKEN_TABLE.USER_LOGIN</code>.
     */
    public void setUserLogin(@NotNull String value) {
        set(4, value);
    }

    /**
     * Getter for <code>TOKEN_TABLE.USER_LOGIN</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 32)
    @NotNull
    public String getUserLogin() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TokenTableRecord
     */
    public TokenTableRecord() {
        super(TokenTable.TOKEN_TABLE);
    }

    /**
     * Create a detached, initialised TokenTableRecord
     */
    @ConstructorProperties({"id", "token", "revoked", "type", "userLogin"})
    public TokenTableRecord(@Nullable Integer id, @NotNull String token, @Nullable Boolean revoked, @NotNull String type, @NotNull String userLogin) {
        super(TokenTable.TOKEN_TABLE);

        setId(id);
        setToken(token);
        setRevoked(revoked);
        setType(type);
        setUserLogin(userLogin);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TokenTableRecord
     */
    public TokenTableRecord(maks.molch.dmitr.core.jooq.tables.pojos.TokenTable value) {
        super(TokenTable.TOKEN_TABLE);

        if (value != null) {
            setId(value.getId());
            setToken(value.getToken());
            setRevoked(value.getRevoked());
            setType(value.getType());
            setUserLogin(value.getUserLogin());
            resetChangedOnNotNull();
        }
    }
}
