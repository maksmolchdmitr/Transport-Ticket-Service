/*
 * This file is generated by jOOQ.
 */
package maks.molch.dmitr.core.jooq.tables;


import maks.molch.dmitr.core.jooq.DefaultSchema;
import maks.molch.dmitr.core.jooq.Keys;
import maks.molch.dmitr.core.jooq.tables.PurchasedTicketsTable.PurchasedTicketsTablePath;
import maks.molch.dmitr.core.jooq.tables.TicketTable.TicketTablePath;
import maks.molch.dmitr.core.jooq.tables.TokenTable.TokenTablePath;
import maks.molch.dmitr.core.jooq.tables.records.UserTableRecord;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.10"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserTable extends TableImpl<UserTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>USER_TABLE</code>
     */
    public static final UserTable USER_TABLE = new UserTable();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<UserTableRecord> getRecordType() {
        return UserTableRecord.class;
    }

    /**
     * The column <code>USER_TABLE.LOGIN</code>.
     */
    public final TableField<UserTableRecord, String> LOGIN = createField(DSL.name("LOGIN"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>USER_TABLE.PASSWORD</code>.
     */
    public final TableField<UserTableRecord, String> PASSWORD = createField(DSL.name("PASSWORD"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>USER_TABLE.FULL_NAME</code>.
     */
    public final TableField<UserTableRecord, String> FULL_NAME = createField(DSL.name("FULL_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>USER_TABLE.ROLE</code>.
     */
    public final TableField<UserTableRecord, String> ROLE = createField(DSL.name("ROLE"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.field(DSL.raw("'USER'"), SQLDataType.VARCHAR)), this, "");

    private UserTable(Name alias, Table<UserTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserTable(Name alias, Table<UserTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>USER_TABLE</code> table reference
     */
    public UserTable(String alias) {
        this(DSL.name(alias), USER_TABLE);
    }

    /**
     * Create an aliased <code>USER_TABLE</code> table reference
     */
    public UserTable(Name alias) {
        this(alias, USER_TABLE);
    }

    /**
     * Create a <code>USER_TABLE</code> table reference
     */
    public UserTable() {
        this(DSL.name("USER_TABLE"), null);
    }

    public <O extends Record> UserTable(Table<O> path, ForeignKey<O, UserTableRecord> childPath, InverseForeignKey<O, UserTableRecord> parentPath) {
        super(path, childPath, parentPath, USER_TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserTablePath extends UserTable implements Path<UserTableRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UserTablePath(Table<O> path, ForeignKey<O, UserTableRecord> childPath, InverseForeignKey<O, UserTableRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserTablePath(Name alias, Table<UserTableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserTablePath as(String alias) {
            return new UserTablePath(DSL.name(alias), this);
        }

        @Override
        public UserTablePath as(Name alias) {
            return new UserTablePath(alias, this);
        }

        @Override
        public UserTablePath as(Table<?> alias) {
            return new UserTablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public UniqueKey<UserTableRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_C;
    }

    private transient PurchasedTicketsTablePath _purchasedTicketsTable;

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.PURCHASED_TICKETS_TABLE</code> table
     */
    public PurchasedTicketsTablePath purchasedTicketsTable() {
        if (_purchasedTicketsTable == null)
            _purchasedTicketsTable = new PurchasedTicketsTablePath(this, null, Keys.CONSTRAINT_BE.getInverseKey());

        return _purchasedTicketsTable;
    }

    private transient TicketTablePath _ticketTable;

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.TICKET_TABLE</code> table
     */
    public TicketTablePath ticketTable() {
        if (_ticketTable == null)
            _ticketTable = new TicketTablePath(this, null, Keys.FK_TICKET_TABLE_PURCHASED_BY.getInverseKey());

        return _ticketTable;
    }

    private transient TokenTablePath _tokenTable;

    /**
     * Get the implicit to-many join path to the <code>PUBLIC.TOKEN_TABLE</code>
     * table
     */
    public TokenTablePath tokenTable() {
        if (_tokenTable == null)
            _tokenTable = new TokenTablePath(this, null, Keys.CONSTRAINT_727.getInverseKey());

        return _tokenTable;
    }

    @Override
    @NotNull
    public UserTable as(String alias) {
        return new UserTable(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public UserTable as(Name alias) {
        return new UserTable(alias, this);
    }

    @Override
    @NotNull
    public UserTable as(Table<?> alias) {
        return new UserTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public UserTable rename(String name) {
        return new UserTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public UserTable rename(Name name) {
        return new UserTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public UserTable rename(Table<?> name) {
        return new UserTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public UserTable where(Condition condition) {
        return new UserTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public UserTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public UserTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public UserTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public UserTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public UserTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public UserTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public UserTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public UserTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public UserTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
