/*
 * This file is generated by jOOQ.
 */
package maks.molch.dmitr.core.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import maks.molch.dmitr.core.jooq.DefaultSchema;
import maks.molch.dmitr.core.jooq.Keys;
import maks.molch.dmitr.core.jooq.tables.CarrierTable.CarrierTablePath;
import maks.molch.dmitr.core.jooq.tables.TicketTable.TicketTablePath;
import maks.molch.dmitr.core.jooq.tables.records.RouteTableRecord;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.10"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RouteTable extends TableImpl<RouteTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ROUTE_TABLE</code>
     */
    public static final RouteTable ROUTE_TABLE = new RouteTable();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<RouteTableRecord> getRecordType() {
        return RouteTableRecord.class;
    }

    /**
     * The column <code>ROUTE_TABLE.ID</code>.
     */
    public final TableField<RouteTableRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ROUTE_TABLE.DEPARTURE</code>.
     */
    public final TableField<RouteTableRecord, String> DEPARTURE = createField(DSL.name("DEPARTURE"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>ROUTE_TABLE.ARRIVAL</code>.
     */
    public final TableField<RouteTableRecord, String> ARRIVAL = createField(DSL.name("ARRIVAL"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>ROUTE_TABLE.CARRIER_NAME</code>.
     */
    public final TableField<RouteTableRecord, String> CARRIER_NAME = createField(DSL.name("CARRIER_NAME"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>ROUTE_TABLE.DURATION_IN_MINUTES</code>.
     */
    public final TableField<RouteTableRecord, Integer> DURATION_IN_MINUTES = createField(DSL.name("DURATION_IN_MINUTES"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ROUTE_TABLE.SEAT_COUNT</code>.
     */
    public final TableField<RouteTableRecord, Integer> SEAT_COUNT = createField(DSL.name("SEAT_COUNT"), SQLDataType.INTEGER.nullable(false), this, "");

    private RouteTable(Name alias, Table<RouteTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RouteTable(Name alias, Table<RouteTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ROUTE_TABLE</code> table reference
     */
    public RouteTable(String alias) {
        this(DSL.name(alias), ROUTE_TABLE);
    }

    /**
     * Create an aliased <code>ROUTE_TABLE</code> table reference
     */
    public RouteTable(Name alias) {
        this(alias, ROUTE_TABLE);
    }

    /**
     * Create a <code>ROUTE_TABLE</code> table reference
     */
    public RouteTable() {
        this(DSL.name("ROUTE_TABLE"), null);
    }

    public <O extends Record> RouteTable(Table<O> path, ForeignKey<O, RouteTableRecord> childPath, InverseForeignKey<O, RouteTableRecord> parentPath) {
        super(path, childPath, parentPath, ROUTE_TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RouteTablePath extends RouteTable implements Path<RouteTableRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> RouteTablePath(Table<O> path, ForeignKey<O, RouteTableRecord> childPath, InverseForeignKey<O, RouteTableRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RouteTablePath(Name alias, Table<RouteTableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RouteTablePath as(String alias) {
            return new RouteTablePath(DSL.name(alias), this);
        }

        @Override
        public RouteTablePath as(Name alias) {
            return new RouteTablePath(alias, this);
        }

        @Override
        public RouteTablePath as(Table<?> alias) {
            return new RouteTablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public Identity<RouteTableRecord, Integer> getIdentity() {
        return (Identity<RouteTableRecord, Integer>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<RouteTableRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    @Override
    @NotNull
    public List<UniqueKey<RouteTableRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_ROUTE_CONSTRAINT);
    }

    @Override
    @NotNull
    public List<ForeignKey<RouteTableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_4D);
    }

    private transient CarrierTablePath _carrierTable;

    /**
     * Get the implicit join path to the <code>PUBLIC.CARRIER_TABLE</code>
     * table.
     */
    public CarrierTablePath carrierTable() {
        if (_carrierTable == null)
            _carrierTable = new CarrierTablePath(this, Keys.CONSTRAINT_4D, null);

        return _carrierTable;
    }

    private transient TicketTablePath _ticketTable;

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.TICKET_TABLE</code> table
     */
    public TicketTablePath ticketTable() {
        if (_ticketTable == null)
            _ticketTable = new TicketTablePath(this, null, Keys.CONSTRAINT_5C.getInverseKey());

        return _ticketTable;
    }

    @Override
    @NotNull
    public RouteTable as(String alias) {
        return new RouteTable(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public RouteTable as(Name alias) {
        return new RouteTable(alias, this);
    }

    @Override
    @NotNull
    public RouteTable as(Table<?> alias) {
        return new RouteTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public RouteTable rename(String name) {
        return new RouteTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public RouteTable rename(Name name) {
        return new RouteTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public RouteTable rename(Table<?> name) {
        return new RouteTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public RouteTable where(Condition condition) {
        return new RouteTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public RouteTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public RouteTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public RouteTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public RouteTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public RouteTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public RouteTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public RouteTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public RouteTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public RouteTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
