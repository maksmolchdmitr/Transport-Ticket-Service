/*
 * This file is generated by jOOQ.
 */
package maks.molch.dmitr.core.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import maks.molch.dmitr.core.jooq.DefaultSchema;
import maks.molch.dmitr.core.jooq.Keys;
import maks.molch.dmitr.core.jooq.tables.UserTable.UserTablePath;
import maks.molch.dmitr.core.jooq.tables.records.TokenTableRecord;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.10"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TokenTable extends TableImpl<TokenTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TOKEN_TABLE</code>
     */
    public static final TokenTable TOKEN_TABLE = new TokenTable();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<TokenTableRecord> getRecordType() {
        return TokenTableRecord.class;
    }

    /**
     * The column <code>TOKEN_TABLE.ID</code>.
     */
    public final TableField<TokenTableRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>TOKEN_TABLE.TOKEN</code>.
     */
    public final TableField<TokenTableRecord, String> TOKEN = createField(DSL.name("TOKEN"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>TOKEN_TABLE.REVOKED</code>.
     */
    public final TableField<TokenTableRecord, Boolean> REVOKED = createField(DSL.name("REVOKED"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("FALSE"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>TOKEN_TABLE.TYPE</code>.
     */
    public final TableField<TokenTableRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>TOKEN_TABLE.USER_LOGIN</code>.
     */
    public final TableField<TokenTableRecord, String> USER_LOGIN = createField(DSL.name("USER_LOGIN"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    private TokenTable(Name alias, Table<TokenTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TokenTable(Name alias, Table<TokenTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>TOKEN_TABLE</code> table reference
     */
    public TokenTable(String alias) {
        this(DSL.name(alias), TOKEN_TABLE);
    }

    /**
     * Create an aliased <code>TOKEN_TABLE</code> table reference
     */
    public TokenTable(Name alias) {
        this(alias, TOKEN_TABLE);
    }

    /**
     * Create a <code>TOKEN_TABLE</code> table reference
     */
    public TokenTable() {
        this(DSL.name("TOKEN_TABLE"), null);
    }

    public <O extends Record> TokenTable(Table<O> path, ForeignKey<O, TokenTableRecord> childPath, InverseForeignKey<O, TokenTableRecord> parentPath) {
        super(path, childPath, parentPath, TOKEN_TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TokenTablePath extends TokenTable implements Path<TokenTableRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TokenTablePath(Table<O> path, ForeignKey<O, TokenTableRecord> childPath, InverseForeignKey<O, TokenTableRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TokenTablePath(Name alias, Table<TokenTableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TokenTablePath as(String alias) {
            return new TokenTablePath(DSL.name(alias), this);
        }

        @Override
        public TokenTablePath as(Name alias) {
            return new TokenTablePath(alias, this);
        }

        @Override
        public TokenTablePath as(Table<?> alias) {
            return new TokenTablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public Identity<TokenTableRecord, Integer> getIdentity() {
        return (Identity<TokenTableRecord, Integer>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<TokenTableRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7;
    }

    @Override
    @NotNull
    public List<UniqueKey<TokenTableRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_72);
    }

    @Override
    @NotNull
    public List<ForeignKey<TokenTableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_727);
    }

    private transient UserTablePath _userTable;

    /**
     * Get the implicit join path to the <code>PUBLIC.USER_TABLE</code> table.
     */
    public UserTablePath userTable() {
        if (_userTable == null)
            _userTable = new UserTablePath(this, Keys.CONSTRAINT_727, null);

        return _userTable;
    }

    @Override
    @NotNull
    public TokenTable as(String alias) {
        return new TokenTable(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public TokenTable as(Name alias) {
        return new TokenTable(alias, this);
    }

    @Override
    @NotNull
    public TokenTable as(Table<?> alias) {
        return new TokenTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public TokenTable rename(String name) {
        return new TokenTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public TokenTable rename(Name name) {
        return new TokenTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public TokenTable rename(Table<?> name) {
        return new TokenTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public TokenTable where(Condition condition) {
        return new TokenTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public TokenTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public TokenTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public TokenTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public TokenTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public TokenTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public TokenTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public TokenTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public TokenTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public TokenTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
