/*
 * This file is generated by jOOQ.
 */
package maks.molch.dmitr.analytic.jooq.tables.pojos;


import jakarta.validation.constraints.Size;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;
import java.io.Serializable;
import java.math.BigInteger;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.19.10"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PurchasedTicketsTable implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer id;
    private String userLogin;
    private LocalDateTime purchaseDatetime;
    private LocalDateTime ticketDatetime;
    private Integer ticketSeatNumber;
    private BigInteger ticketPrice;
    private String routeDeparture;
    private String routeArrival;
    private String carrierName;
    private Integer routeDurationInMinutes;
    private Integer routeSeatCount;

    public PurchasedTicketsTable() {
    }

    public PurchasedTicketsTable(PurchasedTicketsTable value) {
        this.id = value.id;
        this.userLogin = value.userLogin;
        this.purchaseDatetime = value.purchaseDatetime;
        this.ticketDatetime = value.ticketDatetime;
        this.ticketSeatNumber = value.ticketSeatNumber;
        this.ticketPrice = value.ticketPrice;
        this.routeDeparture = value.routeDeparture;
        this.routeArrival = value.routeArrival;
        this.carrierName = value.carrierName;
        this.routeDurationInMinutes = value.routeDurationInMinutes;
        this.routeSeatCount = value.routeSeatCount;
    }

    @ConstructorProperties({"id", "userLogin", "purchaseDatetime", "ticketDatetime", "ticketSeatNumber", "ticketPrice", "routeDeparture", "routeArrival", "carrierName", "routeDurationInMinutes", "routeSeatCount"})
    public PurchasedTicketsTable(
            @Nullable Integer id,
            @NotNull String userLogin,
            @NotNull LocalDateTime purchaseDatetime,
            @NotNull LocalDateTime ticketDatetime,
            @NotNull Integer ticketSeatNumber,
            @NotNull BigInteger ticketPrice,
            @NotNull String routeDeparture,
            @NotNull String routeArrival,
            @NotNull String carrierName,
            @NotNull Integer routeDurationInMinutes,
            @NotNull Integer routeSeatCount
    ) {
        this.id = id;
        this.userLogin = userLogin;
        this.purchaseDatetime = purchaseDatetime;
        this.ticketDatetime = ticketDatetime;
        this.ticketSeatNumber = ticketSeatNumber;
        this.ticketPrice = ticketPrice;
        this.routeDeparture = routeDeparture;
        this.routeArrival = routeArrival;
        this.carrierName = carrierName;
        this.routeDurationInMinutes = routeDurationInMinutes;
        this.routeSeatCount = routeSeatCount;
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.ID</code>.
     */
    @Nullable
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.ID</code>.
     */
    public void setId(@Nullable Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.USER_LOGIN</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 32)
    @NotNull
    public String getUserLogin() {
        return this.userLogin;
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.USER_LOGIN</code>.
     */
    public void setUserLogin(@NotNull String userLogin) {
        this.userLogin = userLogin;
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.PURCHASE_DATETIME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public LocalDateTime getPurchaseDatetime() {
        return this.purchaseDatetime;
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.PURCHASE_DATETIME</code>.
     */
    public void setPurchaseDatetime(@NotNull LocalDateTime purchaseDatetime) {
        this.purchaseDatetime = purchaseDatetime;
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.TICKET_DATETIME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public LocalDateTime getTicketDatetime() {
        return this.ticketDatetime;
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.TICKET_DATETIME</code>.
     */
    public void setTicketDatetime(@NotNull LocalDateTime ticketDatetime) {
        this.ticketDatetime = ticketDatetime;
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.TICKET_SEAT_NUMBER</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getTicketSeatNumber() {
        return this.ticketSeatNumber;
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.TICKET_SEAT_NUMBER</code>.
     */
    public void setTicketSeatNumber(@NotNull Integer ticketSeatNumber) {
        this.ticketSeatNumber = ticketSeatNumber;
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.TICKET_PRICE</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public BigInteger getTicketPrice() {
        return this.ticketPrice;
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.TICKET_PRICE</code>.
     */
    public void setTicketPrice(@NotNull BigInteger ticketPrice) {
        this.ticketPrice = ticketPrice;
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.ROUTE_DEPARTURE</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 32)
    @NotNull
    public String getRouteDeparture() {
        return this.routeDeparture;
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.ROUTE_DEPARTURE</code>.
     */
    public void setRouteDeparture(@NotNull String routeDeparture) {
        this.routeDeparture = routeDeparture;
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.ROUTE_ARRIVAL</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 32)
    @NotNull
    public String getRouteArrival() {
        return this.routeArrival;
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.ROUTE_ARRIVAL</code>.
     */
    public void setRouteArrival(@NotNull String routeArrival) {
        this.routeArrival = routeArrival;
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.CARRIER_NAME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 32)
    @NotNull
    public String getCarrierName() {
        return this.carrierName;
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.CARRIER_NAME</code>.
     */
    public void setCarrierName(@NotNull String carrierName) {
        this.carrierName = carrierName;
    }

    /**
     * Getter for
     * <code>PURCHASED_TICKETS_TABLE.ROUTE_DURATION_IN_MINUTES</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getRouteDurationInMinutes() {
        return this.routeDurationInMinutes;
    }

    /**
     * Setter for
     * <code>PURCHASED_TICKETS_TABLE.ROUTE_DURATION_IN_MINUTES</code>.
     */
    public void setRouteDurationInMinutes(@NotNull Integer routeDurationInMinutes) {
        this.routeDurationInMinutes = routeDurationInMinutes;
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.ROUTE_SEAT_COUNT</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getRouteSeatCount() {
        return this.routeSeatCount;
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.ROUTE_SEAT_COUNT</code>.
     */
    public void setRouteSeatCount(@NotNull Integer routeSeatCount) {
        this.routeSeatCount = routeSeatCount;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final PurchasedTicketsTable other = (PurchasedTicketsTable) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        } else if (!this.id.equals(other.id))
            return false;
        if (this.userLogin == null) {
            if (other.userLogin != null)
                return false;
        } else if (!this.userLogin.equals(other.userLogin))
            return false;
        if (this.purchaseDatetime == null) {
            if (other.purchaseDatetime != null)
                return false;
        } else if (!this.purchaseDatetime.equals(other.purchaseDatetime))
            return false;
        if (this.ticketDatetime == null) {
            if (other.ticketDatetime != null)
                return false;
        } else if (!this.ticketDatetime.equals(other.ticketDatetime))
            return false;
        if (this.ticketSeatNumber == null) {
            if (other.ticketSeatNumber != null)
                return false;
        } else if (!this.ticketSeatNumber.equals(other.ticketSeatNumber))
            return false;
        if (this.ticketPrice == null) {
            if (other.ticketPrice != null)
                return false;
        } else if (!this.ticketPrice.equals(other.ticketPrice))
            return false;
        if (this.routeDeparture == null) {
            if (other.routeDeparture != null)
                return false;
        } else if (!this.routeDeparture.equals(other.routeDeparture))
            return false;
        if (this.routeArrival == null) {
            if (other.routeArrival != null)
                return false;
        } else if (!this.routeArrival.equals(other.routeArrival))
            return false;
        if (this.carrierName == null) {
            if (other.carrierName != null)
                return false;
        } else if (!this.carrierName.equals(other.carrierName))
            return false;
        if (this.routeDurationInMinutes == null) {
            if (other.routeDurationInMinutes != null)
                return false;
        } else if (!this.routeDurationInMinutes.equals(other.routeDurationInMinutes))
            return false;
        if (this.routeSeatCount == null) {
            if (other.routeSeatCount != null)
                return false;
        } else if (!this.routeSeatCount.equals(other.routeSeatCount))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.userLogin == null) ? 0 : this.userLogin.hashCode());
        result = prime * result + ((this.purchaseDatetime == null) ? 0 : this.purchaseDatetime.hashCode());
        result = prime * result + ((this.ticketDatetime == null) ? 0 : this.ticketDatetime.hashCode());
        result = prime * result + ((this.ticketSeatNumber == null) ? 0 : this.ticketSeatNumber.hashCode());
        result = prime * result + ((this.ticketPrice == null) ? 0 : this.ticketPrice.hashCode());
        result = prime * result + ((this.routeDeparture == null) ? 0 : this.routeDeparture.hashCode());
        result = prime * result + ((this.routeArrival == null) ? 0 : this.routeArrival.hashCode());
        result = prime * result + ((this.carrierName == null) ? 0 : this.carrierName.hashCode());
        result = prime * result + ((this.routeDurationInMinutes == null) ? 0 : this.routeDurationInMinutes.hashCode());
        result = prime * result + ((this.routeSeatCount == null) ? 0 : this.routeSeatCount.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PurchasedTicketsTable (");

        sb.append(id);
        sb.append(", ").append(userLogin);
        sb.append(", ").append(purchaseDatetime);
        sb.append(", ").append(ticketDatetime);
        sb.append(", ").append(ticketSeatNumber);
        sb.append(", ").append(ticketPrice);
        sb.append(", ").append(routeDeparture);
        sb.append(", ").append(routeArrival);
        sb.append(", ").append(carrierName);
        sb.append(", ").append(routeDurationInMinutes);
        sb.append(", ").append(routeSeatCount);

        sb.append(")");
        return sb.toString();
    }
}
