/*
 * This file is generated by jOOQ.
 */
package maks.molch.dmitr.analytic.jooq.tables;


import maks.molch.dmitr.analytic.jooq.DefaultSchema;
import maks.molch.dmitr.analytic.jooq.Keys;
import maks.molch.dmitr.analytic.jooq.tables.records.PurchasedTicketsTableRecord;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.math.BigInteger;
import java.time.LocalDateTime;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.19.10"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PurchasedTicketsTable extends TableImpl<PurchasedTicketsTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PURCHASED_TICKETS_TABLE</code>
     */
    public static final PurchasedTicketsTable PURCHASED_TICKETS_TABLE = new PurchasedTicketsTable();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<PurchasedTicketsTableRecord> getRecordType() {
        return PurchasedTicketsTableRecord.class;
    }

    /**
     * The column <code>PURCHASED_TICKETS_TABLE.ID</code>.
     */
    public final TableField<PurchasedTicketsTableRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PURCHASED_TICKETS_TABLE.USER_LOGIN</code>.
     */
    public final TableField<PurchasedTicketsTableRecord, String> USER_LOGIN = createField(DSL.name("USER_LOGIN"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>PURCHASED_TICKETS_TABLE.PURCHASE_DATETIME</code>.
     */
    public final TableField<PurchasedTicketsTableRecord, LocalDateTime> PURCHASE_DATETIME = createField(DSL.name("PURCHASE_DATETIME"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>PURCHASED_TICKETS_TABLE.TICKET_DATETIME</code>.
     */
    public final TableField<PurchasedTicketsTableRecord, LocalDateTime> TICKET_DATETIME = createField(DSL.name("TICKET_DATETIME"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>PURCHASED_TICKETS_TABLE.TICKET_SEAT_NUMBER</code>.
     */
    public final TableField<PurchasedTicketsTableRecord, Integer> TICKET_SEAT_NUMBER = createField(DSL.name("TICKET_SEAT_NUMBER"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PURCHASED_TICKETS_TABLE.TICKET_PRICE</code>.
     */
    public final TableField<PurchasedTicketsTableRecord, BigInteger> TICKET_PRICE = createField(DSL.name("TICKET_PRICE"), SQLDataType.DECIMAL_INTEGER(100000).nullable(false), this, "");

    /**
     * The column <code>PURCHASED_TICKETS_TABLE.ROUTE_DEPARTURE</code>.
     */
    public final TableField<PurchasedTicketsTableRecord, String> ROUTE_DEPARTURE = createField(DSL.name("ROUTE_DEPARTURE"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>PURCHASED_TICKETS_TABLE.ROUTE_ARRIVAL</code>.
     */
    public final TableField<PurchasedTicketsTableRecord, String> ROUTE_ARRIVAL = createField(DSL.name("ROUTE_ARRIVAL"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>PURCHASED_TICKETS_TABLE.CARRIER_NAME</code>.
     */
    public final TableField<PurchasedTicketsTableRecord, String> CARRIER_NAME = createField(DSL.name("CARRIER_NAME"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column
     * <code>PURCHASED_TICKETS_TABLE.ROUTE_DURATION_IN_MINUTES</code>.
     */
    public final TableField<PurchasedTicketsTableRecord, Integer> ROUTE_DURATION_IN_MINUTES = createField(DSL.name("ROUTE_DURATION_IN_MINUTES"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PURCHASED_TICKETS_TABLE.ROUTE_SEAT_COUNT</code>.
     */
    public final TableField<PurchasedTicketsTableRecord, Integer> ROUTE_SEAT_COUNT = createField(DSL.name("ROUTE_SEAT_COUNT"), SQLDataType.INTEGER.nullable(false), this, "");

    private PurchasedTicketsTable(Name alias, Table<PurchasedTicketsTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PurchasedTicketsTable(Name alias, Table<PurchasedTicketsTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PURCHASED_TICKETS_TABLE</code> table reference
     */
    public PurchasedTicketsTable(String alias) {
        this(DSL.name(alias), PURCHASED_TICKETS_TABLE);
    }

    /**
     * Create an aliased <code>PURCHASED_TICKETS_TABLE</code> table reference
     */
    public PurchasedTicketsTable(Name alias) {
        this(alias, PURCHASED_TICKETS_TABLE);
    }

    /**
     * Create a <code>PURCHASED_TICKETS_TABLE</code> table reference
     */
    public PurchasedTicketsTable() {
        this(DSL.name("PURCHASED_TICKETS_TABLE"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public Identity<PurchasedTicketsTableRecord, Integer> getIdentity() {
        return (Identity<PurchasedTicketsTableRecord, Integer>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<PurchasedTicketsTableRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_B;
    }

    @Override
    @NotNull
    public PurchasedTicketsTable as(String alias) {
        return new PurchasedTicketsTable(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PurchasedTicketsTable as(Name alias) {
        return new PurchasedTicketsTable(alias, this);
    }

    @Override
    @NotNull
    public PurchasedTicketsTable as(Table<?> alias) {
        return new PurchasedTicketsTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PurchasedTicketsTable rename(String name) {
        return new PurchasedTicketsTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PurchasedTicketsTable rename(Name name) {
        return new PurchasedTicketsTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public PurchasedTicketsTable rename(Table<?> name) {
        return new PurchasedTicketsTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public PurchasedTicketsTable where(Condition condition) {
        return new PurchasedTicketsTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public PurchasedTicketsTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public PurchasedTicketsTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public PurchasedTicketsTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public PurchasedTicketsTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public PurchasedTicketsTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public PurchasedTicketsTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public PurchasedTicketsTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public PurchasedTicketsTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public PurchasedTicketsTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
