/*
 * This file is generated by jOOQ.
 */
package maks.molch.dmitr.analytic.jooq.tables.records;


import jakarta.validation.constraints.Size;
import maks.molch.dmitr.analytic.jooq.tables.PurchasedTicketsTable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;
import java.math.BigInteger;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.19.10"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PurchasedTicketsTableRecord extends UpdatableRecordImpl<PurchasedTicketsTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.ID</code>.
     */
    public void setId(@Nullable Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.ID</code>.
     */
    @Nullable
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.USER_LOGIN</code>.
     */
    public void setUserLogin(@NotNull String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.USER_LOGIN</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 32)
    @NotNull
    public String getUserLogin() {
        return (String) get(1);
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.PURCHASE_DATETIME</code>.
     */
    public void setPurchaseDatetime(@NotNull LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.PURCHASE_DATETIME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public LocalDateTime getPurchaseDatetime() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.TICKET_DATETIME</code>.
     */
    public void setTicketDatetime(@NotNull LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.TICKET_DATETIME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public LocalDateTime getTicketDatetime() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.TICKET_SEAT_NUMBER</code>.
     */
    public void setTicketSeatNumber(@NotNull Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.TICKET_SEAT_NUMBER</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getTicketSeatNumber() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.TICKET_PRICE</code>.
     */
    public void setTicketPrice(@NotNull BigInteger value) {
        set(5, value);
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.TICKET_PRICE</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public BigInteger getTicketPrice() {
        return (BigInteger) get(5);
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.ROUTE_DEPARTURE</code>.
     */
    public void setRouteDeparture(@NotNull String value) {
        set(6, value);
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.ROUTE_DEPARTURE</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 32)
    @NotNull
    public String getRouteDeparture() {
        return (String) get(6);
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.ROUTE_ARRIVAL</code>.
     */
    public void setRouteArrival(@NotNull String value) {
        set(7, value);
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.ROUTE_ARRIVAL</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 32)
    @NotNull
    public String getRouteArrival() {
        return (String) get(7);
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.CARRIER_NAME</code>.
     */
    public void setCarrierName(@NotNull String value) {
        set(8, value);
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.CARRIER_NAME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 32)
    @NotNull
    public String getCarrierName() {
        return (String) get(8);
    }

    /**
     * Setter for
     * <code>PURCHASED_TICKETS_TABLE.ROUTE_DURATION_IN_MINUTES</code>.
     */
    public void setRouteDurationInMinutes(@NotNull Integer value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>PURCHASED_TICKETS_TABLE.ROUTE_DURATION_IN_MINUTES</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getRouteDurationInMinutes() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>PURCHASED_TICKETS_TABLE.ROUTE_SEAT_COUNT</code>.
     */
    public void setRouteSeatCount(@NotNull Integer value) {
        set(10, value);
    }

    /**
     * Getter for <code>PURCHASED_TICKETS_TABLE.ROUTE_SEAT_COUNT</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getRouteSeatCount() {
        return (Integer) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PurchasedTicketsTableRecord
     */
    public PurchasedTicketsTableRecord() {
        super(PurchasedTicketsTable.PURCHASED_TICKETS_TABLE);
    }

    /**
     * Create a detached, initialised PurchasedTicketsTableRecord
     */
    @ConstructorProperties({"id", "userLogin", "purchaseDatetime", "ticketDatetime", "ticketSeatNumber", "ticketPrice", "routeDeparture", "routeArrival", "carrierName", "routeDurationInMinutes", "routeSeatCount"})
    public PurchasedTicketsTableRecord(@Nullable Integer id, @NotNull String userLogin, @NotNull LocalDateTime purchaseDatetime, @NotNull LocalDateTime ticketDatetime, @NotNull Integer ticketSeatNumber, @NotNull BigInteger ticketPrice, @NotNull String routeDeparture, @NotNull String routeArrival, @NotNull String carrierName, @NotNull Integer routeDurationInMinutes, @NotNull Integer routeSeatCount) {
        super(PurchasedTicketsTable.PURCHASED_TICKETS_TABLE);

        setId(id);
        setUserLogin(userLogin);
        setPurchaseDatetime(purchaseDatetime);
        setTicketDatetime(ticketDatetime);
        setTicketSeatNumber(ticketSeatNumber);
        setTicketPrice(ticketPrice);
        setRouteDeparture(routeDeparture);
        setRouteArrival(routeArrival);
        setCarrierName(carrierName);
        setRouteDurationInMinutes(routeDurationInMinutes);
        setRouteSeatCount(routeSeatCount);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PurchasedTicketsTableRecord
     */
    public PurchasedTicketsTableRecord(maks.molch.dmitr.analytic.jooq.tables.pojos.PurchasedTicketsTable value) {
        super(PurchasedTicketsTable.PURCHASED_TICKETS_TABLE);

        if (value != null) {
            setId(value.getId());
            setUserLogin(value.getUserLogin());
            setPurchaseDatetime(value.getPurchaseDatetime());
            setTicketDatetime(value.getTicketDatetime());
            setTicketSeatNumber(value.getTicketSeatNumber());
            setTicketPrice(value.getTicketPrice());
            setRouteDeparture(value.getRouteDeparture());
            setRouteArrival(value.getRouteArrival());
            setCarrierName(value.getCarrierName());
            setRouteDurationInMinutes(value.getRouteDurationInMinutes());
            setRouteSeatCount(value.getRouteSeatCount());
            resetChangedOnNotNull();
        }
    }
}
